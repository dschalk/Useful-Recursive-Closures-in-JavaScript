{"version":3,"file":"_page.svelte-UbbrU71v.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, e as escape, b as add_attribute } from \"../../chunks/ssr.js\";\nconst F = \"/_app/immutable/assets/F.ewlc2ijQ.png\";\nconst css$1 = {\n  code: \"span.svelte-rqsz06{color:rgb(219, 253, 244);font-size:24px;margin:0%}a.svelte-rqsz06{color:magenta}a.svelte-rqsz06:hover{color:white;background-color:#000}img.svelte-rqsz06{width:25%;height:auto}img.svelte-rqsz06{display:block;margin:0 auto;width:100%}\",\n  map: null\n};\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  var Mdis = `    function M (x) {\n      return function go (func)\n        {\n            if (func === dF3x) return x;\n            else x = func(x);\n            return go;\n        }\n    }`;\n  var mCode = `m = M([ [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"], [\"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\"], [\"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"], [\"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"], [\"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\"], [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"] ]);`;\n  var domCube = `<div class=\"face front\">\n                <div class=\"grid\">\n                    <button style=\"background-color: {m(dF3x)[3][0]}\" on:click={() => {m = m(Fz)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][1]}\" on:click={() => {m = m(Cx)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][2]}\" on:click={() => {m = m(F)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][3]}\" on:click={() => {m = m(Cyr)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][4]}\" on:click={() => {m = m(Zro)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][5]}\" on:click={() => {m = m(Cy)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][6]}\" on:click={() => {m = m(Fz)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][7]}\" on:click={() => {m = m(Cxr)}}/>\n                    <button style=\"background-color: {m(dF3x)[3][8]}\" on:click={() => {m = m(F)}}/>\n                </div>\n            </div>\n\n            <div class=\"face right\">\n                <div class=\"grid\">\n                    <button style=\"background-color: {m(dF3x)[0][0]}\" on:click={() => {m = m(Rz)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][1]}\" on:click={() => {m = m(Cz)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][2]}\" on:click={() => {m = m(R)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][3]}\" on:click={() => {m = m(Cyr)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][4]}\" on:click={() => {m = m(Xro)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][5]}\" on:click={() => {m = m(Cy)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][6]}\" on:click={() => {m = m(Rz)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][7]}\" on:click={() => {m = m(Czr)}}/>\n                    <button style=\"background-color: {m(dF3x)[0][8]}\" on:click={() => {m = m(R)}}/>\n                </div>\n            </div>\n            <div class=\"face top\">\n                <div class=\"grid\">\n                    <button style=\"background-color: {m(dF3x)[4][0]}\" on:click={() => {m = m(Uz)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][1]}\" on:click={() => {m = m(Cx)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][2]}\" on:click={() => {m = m(U)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][3]}\" on:click={() => {m = m(Cz)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][4]}\" on:click={() => {m = m(Yro)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][5]}\" on:click={() => {m = m(Czr)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][6]}\" on:click={() => {m = m(Uz)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][7]}\" on:click={() => {m = m(Cxr)}}/>\n                    <button style=\"background-color: {m(dF3x)[4][8]}\" on:click={() => {m = m(U)}}/>\n                </div>        \n            </div>`;\n  var mCode = `      var m = M([ [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\n      [\"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\", \"green\"],\n      [\"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"],\n      [\"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"],\n      [\"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\"],\n      [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"] ]);`;\n  var Fcode2 = `      var m = M([ [\"yellow\", \"blue\", \"blue\", \"yellow\", \"blue\", \"blue\", \"yellow\", \"blue\", \"blue\"],\n      [\"green\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"green\", \"white\"],\n      [\"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"],\n      [\"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\"],\n      [\"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"yellow\", \"green\", \"green\", \"green\"],\n      [\"blue\", \"blue\", \"blue\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"] ]);`;\n  var functionF = `function F(ar) {\n    let temp = [];\n    temp[0] = [\n      ar[4][6],\n      ar[0][1],\n      ar[0][2],\n      ar[4][7],\n      ar[0][4],\n      ar[0][5],\n      ar[4][8],\n      ar[0][7],\n      ar[0][8],\n    ];\n\n    temp[1] = [\n      ar[1][0],\n      ar[1][1],\n      ar[5][0],\n      ar[1][3],\n      ar[1][4],\n      ar[5][1],\n      ar[1][6],\n      ar[1][7],\n      ar[5][2],\n    ];\n\n    temp[2] = ar[2];\n\n    temp[3] = [\n      ar[3][6],\n      ar[3][3],\n      ar[3][0],\n      ar[3][7],\n      ar[3][4],\n      ar[3][1],\n      ar[3][8],\n      ar[3][5],\n      ar[3][2],\n    ];\n\n    temp[4] = [\n      ar[4][0],\n      ar[4][1],\n      ar[4][2],\n      ar[4][3],\n      ar[4][4],\n      ar[4][5],\n      ar[1][8],\n      ar[1][5],\n      ar[1][2],\n    ];\n\n    temp[5] = [\n      ar[0][6],\n      ar[0][3],\n      ar[0][0],\n      ar[5][3],\n      ar[5][4],\n      ar[5][5],\n      ar[5][6],\n      ar[5][7],\n      ar[5][8],\n    ];\n    return temp;\n} `;\n  var Fbeginning = `let temp = [];\ntemp[0] = [\nar[4][6]`;\n  var Fend = `temp[5] = [\n    ar[0][6],\n    ar[0][3],\n    ar[0][0],\n    ar[5][3],\n    ar[5][4],\n    ar[5][5],\n    ar[5][6],\n    ar[5][7],\n    ar[5][8], ];\nreturn temp;\n`;\n  var H = \"\";\n  var I = \"\";\n  var G = \"\";\n  function* generatorFunction() {\n    yield `m(dF3x) // 3 (as expected from the definition of M)`;\n    yield \"m(v=>v**3) . . . causing 3 => 3**3 = 27\";\n    yield \"m(dF3x) // 27 (as expected)\";\n    yield \"m(v=>v*2)(v=>v-12) evaluates from left to right; i.e., (2 * 27) - 12.\";\n    yield `m(dF3x)  // 42`;\n    yield `m(v=>v+7)(Math.sqrt)(dF3x)  // x in the m-M(x) closure is now sqrt(42 + 7) = 7`;\n    yield `m(v = v * 6) // Back to 42`;\n    yield `m(dF3x)  // 42, as expected`;\n    yield H = \"\";\n    yield I = \"\";\n    yield ``;\n    generatorFunction();\n  }\n  generatorFunction();\n  var x3 = `    const dF3x = () => {}`;\n  $$result.css.add(css$1);\n  return ` <div style=\"margin-left: 8%; margin-right: 8%\" id=\"top\"><h1 style=\"text-align: center; color: #f5ee9f\" data-svelte-h=\"svelte-17i9lsv\">Recursive Closures</h1> <p style=\"text-indent:3% \" data-svelte-h=\"svelte-ocoy07\">&quot;M&quot; returns the recursive function &quot;go&quot;. &quot;m-M(x) closures&quot; refers to closure created by defining &quot;m&quot; as the recursive function return by &quot;M&quot; when &quot;m = M(x)&quot; runs. &quot;M&quot; is defined below, &quot;x&quot; can be any JavaScript value, and &quot;func&quot; is either dF3x or a function that operates on x.</p> <div style=\"<color:#880000; font-size:32\"><pre>${escape(x3)}</pre> <pre>${escape(Mdis)}</pre> <pre>${escape(I)}</pre> <pre>${escape(H)}</pre> <pre>${escape(G)}</pre></div> <span class=\"svelte-rqsz06\" data-svelte-h=\"svelte-xx3h5c\">    Anonymous closures can perform computations without leaving persistent closures in memory. The results might be assigned to variables, placed in persistent objects, memorialized in log files, and so forth; but the closures that produced those results are subject to immediate garbage collection. Here an example: </span><span style=\"color: #f5ee9f; font-size:28px\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-xb783u\">console.log( M( 3 )( v=&gt;v**3 )( v=&gt;v*4 )( v=&gt;v-8 )( Math.sqrt )( dF3x ) ) // 42 </span><br> <br> <span class=\"svelte-rqsz06\" data-svelte-h=\"svelte-h11p7k\">    The variable &quot;m&quot; (above) is a number. The closure that performed the computation is gone, out of reach and subject to garbage collection. But, when the closure is named, it remains at least as long as a browser tab remains open; longer with persistent storage.</span> <br> <span style=\"color: #f5ee9f\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-18ergd2\">         m = M(3)(v=&gt;v**3)(v=&gt;v*4)(v=&gt;v-8)(Math.sqrt)</span><br> <span style=\"color: #f5ee9f; font-size:28px\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-1oth1pw\">        console.log ( &quot;m is&quot;, m )      // m is function go(func)\n</span><br> <span style=\"color: #f5ee9f; font-size:28px\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-4w7o34\">          console.log(m(dF3x))     // 10</span> <br> <span style=\"color: #f5ee9f; font-size:28px\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-jbbdnd\">         m(v=&gt;v+4)(v=&gt;v*3)      //  </span> <br> <span style=\"color: #f5ee9f; font-size:28px\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-19p6vhb\">          console.log(m(dF3x))     // 42</span> <p data-svelte-h=\"svelte-alhn9v\">    For more examples, and to see m-M(x) closures handle asynchronous functions, go to <a href=\"./async5#yes\" class=\"svelte-rqsz06\">Async</a>.</p> <h1 style=\"text-align: center; color: #f5ee9f\" data-svelte-h=\"svelte-3x2697\">A Fast and Efficient Virtual Rubik&#39;s Cube</h1> <p data-svelte-h=\"svelte-1gf9qms\">The JavaScript representation of the virtual Rubik&#39;s cube visible in the browser is contained in an m-M(x) closure where x starts out as an array of 6 nine-member arrays of strings. All 9 members of x[0] are the string &quot;blue&quot;. x[1] is all &quot;green&quot;, x[2] all &quot;red&quot;, x[3] all &quot;orange&quot;, x[4] all &quot;yellow&quot;, and the 9 members of x[5] are the string &quot;white&quot;.</p> <p data-svelte-h=\"svelte-1oqwx6j\">The virtual Rubik&#39;s cube in the DOM and displayed in the browser consists of 9 front-facing buttons, 9 top buttons, and 9 side buttons. Each of the 27 buttons containin a &quot;style = &#39; background-color: m(dF3x)[ j ][ k ] &#39; &quot; statements. Since user invoked functions are reactive, and m(dF3x) returns the current value of x in the m-M(x) closure, user key presses and button clicks that rearrange the strings in x immediately rearrange the colors of the 9 squares of each of the three visible sides of the virtual Rubik&#39;s cube.</p> <p data-svelte-h=\"svelte-1oicyzr\">Here&#39;s the HTML code:</p> <pre>${escape(domCube)}</pre> <p data-svelte-h=\"svelte-1v1b7sp\">And here&#39;s the JavaScript representation of the virtual Rubik&#39;s cube:</p> <pre>${escape(mCode)}</pre> <p data-svelte-h=\"svelte-16yt25q\">After pressing &quot;F&quot;, clicking the &quot;F&quot; button, or clicking the upper or lower right side of the front of the virtual cube, x in the m-M(x) rearranges to this configuration:\n</p><pre>${escape(Fcode2)}</pre> <p data-svelte-h=\"svelte-145bh0k\">And the cube looks like this:</p> <img${add_attribute(\"src\", F, 0)} alt=\"Cube after F\" style=\"width:150px;height:155px;\" class=\"svelte-rqsz06\"> <p data-svelte-h=\"svelte-rest4g\">When a user presses the &quot;F&quot; key, m(F) runs, causing x =&gt; F(x). The return value of F(x) when x is in its starting configuration is shown above. Here&#39;s the definition of F:\n\n</p><pre>${escape(functionF)}</pre> <p data-svelte-h=\"svelte-1go0zhe\">F populates a temporary array &quot;temp&quot; with values taken from locations on x specified by the definition of F. It begins with \n  </p><pre>${escape(Fbeginning)}</pre> <p data-svelte-h=\"svelte-le3lti\">F ends with:</p> <pre>${escape(Fend)}</pre> <p data-svelte-h=\"svelte-s1x5ja\">R replaces the first three elements of temp[5] with whatever strings happen to be at x[0][6], x[0][3]Then F returns temp, causing it to replace the current value of x. The values of the strings F places in temp are not relevant.   locations without regard to whether the strings happen to be &quot;blue&quot;, &quot;green&quot;, &quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, or &quot;white&quot;.\n</p><p data-svelte-h=\"svelte-ei6jrz\">Looking at x after the transformation (above), we see that the first thing F(x) does is move the string that happens to be at x[4][6] to x[0][0], Near the bottom of F, we see that x[0][0] goes to x[5][2]. Whatever happened to be at x[5][2] ends up at x[1][8].</p> <p data-svelte-h=\"svelte-11ayztk\">x remains an array of six nine-member arrays of strings, maintaining its one-to-one correspondence with the six, nine-cubit sides of the virtual Rubik&#39;s cube. None of the functions available to users change the structure of x, just as solving a real Rubik&#39;s does not change the number of cubits on each side of the cube.\n  \n\n\n\n\n</p><h1 style=\"text-align: center; color: #f5ee9f\" data-svelte-h=\"svelte-13ler7r\">The Game of Score</h1> <p data-svelte-h=\"svelte-sknn1e\">The <a href=\"./score#mDef\" class=\"svelte-rqsz06\">Solitaire Game of Score</a> involves using two six-sided,\n      one twelve-sided, and one twenty-sided die along with arithmetic and concatenation\n      to arrive at the number 20 in two or more moves. The initial value of &quot;x&quot; in\n      the m-M(x) closure is shown in the definition of m2:</p> <pre data-svelte-h=\"svelte-1fbr1ln\">m2 = M([ \n    [Math.floor(Math.random() * 6)   + 1, Math.floor(Math.random() * 6) + 1,\n     Math.floor(Math.random() * 12) + 1, Math.floor(Math.random() * 20) + 1], \n     [], [&#39;+&#39;], [], [0], [], [0], [] \n]);</pre></div> <a href=\"#top\" class=\"svelte-rqsz06\" data-svelte-h=\"svelte-1887boa\">Back to the top</a> ${slots.default ? slots.default({}) : ``}`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":";;AACA,MAAM,CAAC,GAAG,uCAAuC,CAAC;AAClD,MAAM,KAAK,GAAG;AACd,EAAE,IAAI,EAAE,8PAA8P;AACtQ,EAAE,GAAG,EAAE,IAAI;AACX,CAAC,CAAC;AACG,MAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,KAAK;AAC5E,EAAE,IAAI,IAAI,GAAG,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,CAAC;AACP,EAAE,IAAI,KAAK,GAAG,CAAC,mfAAmf,CAAC,CAAC;AACpgB,EAAE,IAAI,OAAO,GAAG,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,CAAC,CAAC;AACpB,EAAE,IAAI,KAAK,GAAG,CAAC;AACf;AACA;AACA;AACA;AACA,2FAA2F,CAAC,CAAC;AAC7F,EAAE,IAAI,MAAM,GAAG,CAAC;AAChB;AACA;AACA;AACA;AACA,wFAAwF,CAAC,CAAC;AAC1F,EAAE,IAAI,SAAS,GAAG,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC;AACJ,EAAE,IAAI,UAAU,GAAG,CAAC;AACpB;AACA,QAAQ,CAAC,CAAC;AACV,EAAE,IAAI,IAAI,GAAG,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;AACb,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;AACb,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;AACb,EAAE,UAAU,iBAAiB,GAAG;AAChC,IAAI,MAAM,CAAC,mDAAmD,CAAC,CAAC;AAChE,IAAI,MAAM,yCAAyC,CAAC;AACpD,IAAI,MAAM,6BAA6B,CAAC;AACxC,IAAI,MAAM,uEAAuE,CAAC;AAClF,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC;AAC3B,IAAI,MAAM,CAAC,8EAA8E,CAAC,CAAC;AAC3F,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC;AACvC,IAAI,MAAM,CAAC,2BAA2B,CAAC,CAAC;AACxC,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,CAAC,CAAC;AACb,IAAI,iBAAiB,EAAE,CAAC;AACxB,GAAG;AACH,EAAE,iBAAiB,EAAE,CAAC;AACtB,EAAE,IAAI,EAAE,GAAG,CAAC,yBAAyB,CAAC,CAAC;AACvC,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1B,EAAE,OAAO,CAAC,2nBAA2nB,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACrvB,u1DAAu1D,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,gIAAgI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AACz/D,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,+EAA+E,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACtI;AACA,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AAC7B,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,8DAA8D,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,EAAE,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACnJ,CAAC;;;;"}