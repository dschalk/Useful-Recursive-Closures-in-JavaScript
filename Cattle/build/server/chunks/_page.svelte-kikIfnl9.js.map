{"version":3,"file":"_page.svelte-kikIfnl9.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/matrix/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, e as escape } from \"../../../chunks/ssr.js\";\nimport { matrix, Matrix, dot, dotMultiply, multiply } from \"mathjs\";\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  console.log(matrix, Matrix, dot, dotMultiply);\n  var python = `Rubik's Cube matrix multiplication (using no context from Notebook)\n\nTo perform matrix multiplication for a Rubik's Cube, we can represent the cube as a 3x3x3 matrix. Each face of the Rubik's Cube can be represented as a 3x3 matrix, and the entire Rubik's Cube can be represented as a 3x3x6 matrix, where each 3x3x1 slice represents a face of the cube. To perform matrix multiplication for a Rubik's Cube, we can use the NumPy package in Python. NumPy provides efficient functions for matrix operations, including matrix multiplication. Here's an example of how you can perform matrix multiplication for a Rubik's Cube using NumPy:\n\n\nimport numpy as np\n\n# Define the initial state of the Rubik's Cube as a 3x3x6 matrix\nrubiks_cube = np.array([\n    # Front face\n    [[1, 1, 1],\n     [1, 1, 1],\n     [1, 1, 1]],\n   \n    # Back face\n    [[2, 2, 2],\n     [2, 2, 2],\n     [2, 2, 2]],\n   \n    # Top face\n    [[3, 3, 3],\n     [3, 3, 3],\n     [3, 3, 3]],\n   \n    # Bottom face\n    [[4, 4, 4],\n     [4, 4, 4],\n     [4, 4, 4]],\n   \n    # Left face\n    [[5, 5, 5],\n     [5, 5, 5],\n     [5, 5, 5]],\n   \n    # Right face\n    [[6, 6, 6],\n     [6, 6, 6],\n     [6, 6, 6]]\n])\n\n# Define a transformation matrix for a specific move (e.g., a clockwise rotation of the front face)\ntransformation_matrix = np.array([\n    [0, 1, 0],\n    [-1, 0, 0],\n    [0, 0, 1]\n])\n\n# Perform matrix multiplication to apply the transformation to the Rubik's Cube\n\ntransformed_cube = np.tensordot(rubiks_cube, transformation_matrix, axes=([2], [0]))\n\nprint(transformed_cube)\n`;\n  var m;\n  var dF3x = () => {\n  };\n  var dF3ar = () => {\n  };\n  function M(x, ar = []) {\n    return function go(func) {\n      if (func === dF3x)\n        return x;\n      else if (func === dF3ar)\n        return ar;\n      x = func(x);\n      ar.push(func.name);\n      console.log(\"func.key is\", func.key);\n      return go;\n    };\n  }\n  var cube = matrix([\n    [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\n    [\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\",\n      \"green\"\n    ],\n    [\"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\", \"red\"],\n    [\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\",\n      \"orange\"\n    ],\n    [\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\",\n      \"yellow\"\n    ],\n    [\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\",\n      \"white\"\n    ]\n  ]);\n  var m = M(cube);\n  console.log(\"cube._data is\", cube._data);\n  console.log(\"m(dF3x is\", m(dF3x));\n  var R = [\n    [0, 1, 0],\n    [-1, 0, 0],\n    [0, 0, 1],\n    [0, 1, 0],\n    [-1, 0, 0],\n    [0, 0, 1],\n    [0, 1, 0],\n    [-1, 0, 0],\n    [0, 0, 1]\n  ];\n  console.log(\"dot(m(dF3x)._data, R\", multiply(R, m(dF3x)._data));\n  m(dF3ar).length;\n  return `<p data-svelte-h=\"svelte-totshb\">Rubik&#39;s Cube matrix multiplication (using no context from Notebook)</p> <p style=\"line-height: 100%\" data-svelte-h=\"svelte-u7kzrm\">To perform matrix multiplication for a\nRubik&#39;s Cube, we can represent the cube as a 3x3x3 matrix. Each face\nof the Rubik&#39;s Cube can be represented as a 3x3 matrix, and the\nentire Rubik&#39;s Cube can be represented as a 3x3x6 matrix, where each\n3x3x1 slice represents a face of the cube. To perform matrix\nmultiplication for a Rubik&#39;s Cube, we can use the NumPy package in\nPython. NumPy provides efficient functions for matrix operations,\nincluding matrix multiplication. Here&#39;s an example of how you can\nperform matrix multiplication for a Rubik&#39;s Cube using NumPy:</p> <pre style=\"color:gold\">${escape(python)}</pre>`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":"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"}